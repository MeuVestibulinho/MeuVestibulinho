// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


// O que √© o prisma ? 

// √â uma ferramenta que facilita a intera√ß√£o entre a sua aplica√ß√£o e um banco de dados relacional,
// sendo amplamente utilizada por sua modernidade, tipagem segura e por simplificar tarefas como modelagem de dados e migra√ß√µes. 




// Define como o Prisma vai gerar o Prisma Client (biblioteca tipada para acessar o DB):
generator client {
  provider = "prisma-client-js"
}



// Diz ao Prisma qual banco usar (Postgres, MySQL, SQLite, etc.) e onde est√° a conex√£o:
datasource db {
  provider = "postgresql"

  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string

  // URL principal do banco que sua aplica√ß√£o usa
  url = env("DATABASE_URL")

  // üëá IMPORTANTE: URL do "shadow database" usada pelo `prisma migrate dev` para comparar/montar migra√ß√µes com seguran√ßa.
  // Aqui apontamos para o DB "postgres" (padr√£o) com um schema fict√≠cio "shadow".
  // Defina a vari√°vel SHADOW_DATABASE_URL no seu .env (exemplo abaixo).
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Usu√°rio da aplica√ß√£o (aluno/professor/admin, etc.)
model User {
  id            String   @id @default(cuid())    // PK string gerada com cuid(), cuid() √© um gerador de IDs √∫nicos
  name          String?                          // nome opcional
  email         String?  @unique                 // e-mail opcional, mas √∫nico se existir
  emailVerified DateTime?                        // quando o e-mail foi verificado (magic link)
  image         String?                          // avatar/foto (URL)
  accounts      Account[]                        // 1:N -> contas OAuth ligadas a este user (OAuth √© um padr√£o aberto de autoriza√ß√£o que permite que voc√™ use uma conta de um servi√ßo (Google, Facebook, GitHub, Discord, etc.) para se autenticar em outro sistema sem precisar passar a senha desse servi√ßo.)
  sessions      Session[]                        // 1:N -> sess√µes ativas (cookies/JWT persistido)
}

// Conta de provedor de login, aqui ficam as informa√ß√µes de autentica√ß√£o fornecidas pelo provedor de OAuth (google, github, discord, etc.)
model Account {
  id                String  @id @default(cuid()) // PK
  userId            String                          // FK para User
  type              String                          // "oauth" | "oidc" | "email" | "credentials"‚Ä¶
  provider          String                          // nome do provedor, ex.: "google"
  providerAccountId String                          // ID do usu√°rio no provedor (ex.: sub do Google)
  refresh_token     String?                         // token de refresh (se o provedor fornece)
  access_token      String?                         // token de acesso
  expires_at        Int?                            // epoch (segundos) de expira√ß√£o do access_token
  token_type        String?                         // ex.: "bearer"
  scope             String?                         // escopos concedidos, ex.: "openid email profile"
  id_token          String?                         // id_token (OIDC)
  session_state     String?                         // usado por alguns provedores (opcional)

  // Rela√ß√£o N:1 com User; apaga contas ao apagar o user (Cascade), √© um comando do SQL, vimos isso na aula de base de dados relacional
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Restri√ß√£o √∫nica: um mesmo (provider, providerAccountId) s√≥ pode existir uma vez
  // Provider √© o nome do provedor (ex.: "google")
  // providerAccountId √© o ID do usu√°rio nesse provedor (ex.: sub do Google)
  // Isso evita que o mesmo usu√°rio do Google seja cadastrado v√°rias vezes
  @@unique([provider, providerAccountId])
}

// Sess√£o persistida pelo NextAuth (se usar sess√µes em BD; com JWT puro pode n√£o usar), aqui ficam os tokens de sess√£o e quando expiram
// Cada sess√£o est√° ligada a um usu√°rio, essa tabela guarda as sess√µes ativas, que s√£o criadas quando o usu√°rio faz login
// e s√£o removidas quando o usu√°rio faz logout ou a sess√£o expira
model Session {
  id           String   @id @default(cuid())      // PK (PK = Primary Key = chave prim√°ria)
  sessionToken String   @unique                   // token da sess√£o (chave de lookup[ lookup = busca ])
  userId       String                              // FK -> User (qual usu√°rio tem essa sess√£o)
  expires      DateTime                            // quando a sess√£o expira (UTC = tempo universal coordenado, ex.: 2024-06-25T12:00:00Z)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Rela√ß√£o N:1 com User; apaga sess√µes ao apagar o user (Cascade)
}

// Tokens tempor√°rios para verifica√ß√£o (ex.: e-mail de login, reset de senha)
// Eles s√£o criados quando o usu√°rio pede um link m√°gico por e-mail (magic link) ou um reset de senha
// e s√£o removidos quando usados ou expirados, eles servem para validar que o usu√°rio que clicou no link √© o dono do e-mail
// Cada token est√° ligado a um identificador (normalmente o e-mail do usu√°rio)
model VerificationToken {
  identifier String                               // e-mail ou identificador
  token      String   @unique                     // token enviado ao usu√°rio
  expires    DateTime                             // validade do token

  // Restri√ß√£o √∫nica composta para evitar duplicatas por identificador+token, garantindo que cada token seja √∫nico para um dado identificador (identificador √© o e-mail do usu√°rio)
  @@unique([identifier, token])
}


// Nesse arquivo definimos as tabelas do banco de dados e seus relacionamentos, que ser√£o usados pelo Prisma Client para fazer consultas ao banco de dados de forma tipada e segura.
// Cada um desses models vira uma tabela no banco de dados relacional (PostgreSQL, MySQL, SQLite, etc.) e o Prisma Client gera c√≥digo TypeScript para interagir com essas tabelas de forma f√°cil e segura.

