// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ========================================================================
   Auth.js / NextAuth v5 – Sessão em banco (PrismaAdapter)
   ======================================================================== */

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  role          UserRole  @default(USER) // ⬅️ RBAC

  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  // Tokens podem ser longos — usar TEXT evita truncamento
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId]) // acelera joins por usuário
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId]) // acelera lookups por usuário
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/* ========================================================================
   Domínio: Questões (ETEC / Vestibulinho)
   ======================================================================== */

// Enums padronizados
enum Disciplina {
  PORTUGUES
  MATEMATICA
  CIENCIAS
  HISTORIA
  GEOGRAFIA
  INGLES
  OUTRAS
}

enum GrauDificuldade {
  FACIL
  MEDIO
  DIFICIL
}

enum Alternativa {
  A
  B
  C
  D
  E
}

// Questão de prova
model Questao {
  id              String           @id @default(cuid())
  enunciado       String           @db.Text
  disciplina      Disciplina
  grauDificuldade GrauDificuldade
  ano             Int?
  fonteUrl        String?          @db.Text
  imagemUrl       String?          @db.Text
  habilidades     String           @db.Text
  conteudo        String           @db.Text
  subconteudo     String           @db.Text

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  alternativas    AlternativaQuestao[]

  @@index([disciplina])
  @@index([grauDificuldade])
  @@index([ano])
  @@index([createdAt])
  // Índice composto útil para listagens com filtros + ordenação
  @@index([disciplina, grauDificuldade, ano, createdAt])
}

// Alternativas vinculadas à questão
model AlternativaQuestao {
  id        String       @id @default(cuid())
  questaoId String
  letra     Alternativa
  texto     String       @db.Text
  correta   Boolean      @default(false)

  questao   Questao      @relation(fields: [questaoId], references: [id], onDelete: Cascade)

  @@unique([questaoId, letra]) // 1 alternativa por letra/questão
  @@index([questaoId])         // acelera joins
}
